class PlayerShip {

    field int sectorIndex;
    field int subsectorIndex;

    field boolean shieldsUp;
    field int shieldLevel;
    field int hullIntegrity;
    field int engineEfficiency;
    field int weaponsStatus;
    field int missileSupply;
    field int powerReserve;
    field int dronePopulation;

    constructor PlayerShip new(int sector, int subsector) {

        let sectorIndex = sector;
        let subsectorIndex = subsector;

        let shieldsUp = false;
        let shieldLevel = 0;
        let hullIntegrity = 100;
        let engineEfficiency = 100;
        let weaponsStatus = 100;
        let missileSupply = 5;
        let powerReserve = 100;
        let dronePopulation = 25;

        return this;

    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int sectorIndex() {
        return sectorIndex;
    }

    method int subsectorIndex() {
        return subsectorIndex;
    }

    method int weaponsStatus() {
        return weaponsStatus;
    }

    method int engineEfficiency() {
        return engineEfficiency;
    }

    method int hullIntegrity() {
        return hullIntegrity;
    }

    method int powerReserve() {
        return powerReserve;
    }

    method int shieldLevel() {
        return shieldLevel;
    }

    method boolean shieldsUp() {
        return shieldsUp;
    }

    method int missileSupply() {
        return missileSupply;
    }

    method int dronePopulation() {
        return dronePopulation;
    }
   
    method void move(int x, int y) {
        var int d;
        let d = StarMap.distance(
            x, y, 
            StarMap.subsectorX(subsectorIndex), StarMap.subsectorY(subsectorIndex)
        );
        if (powerReserve < d) {
            return;
        }
        let powerReserve = powerReserve - d;
        let subsectorIndex = StarMap.subsectorIndex(x, y);
        // TODO: power usage
        return;
    }

    method void jump(int x, int y) {
        var int d;
        let d = StarMap.distance(
            x, y, 
            StarMap.sectorX(sectorIndex), StarMap.sectorY(sectorIndex)
        );
        if (powerReserve < d) {
            return;
        }
        let powerReserve = powerReserve - d;
        let sectorIndex = StarMap.sectorIndex(x, y);
        let subsectorIndex = Random.randInt(144);
        // TODO: power usage
        return;
    }

    method void fireLasers(int x, int y, int p) {
        if (powerReserve < p) {
            return;
        }
        let powerReserve = powerReserve - p;
        return;
    }
    
    method void fireMissiles(int x, int y) {
        if (missileSupply = 0) {
            return;
        }
        let missileSupply = missileSupply - 1;
        return;
    }

    method void setShields(boolean up) {
        let shieldsUp = up;
        return;
    }
    
    method void repair() {
        return;
    }

}