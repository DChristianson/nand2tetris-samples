// This file is adapted from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

class Memory {

    static Array freeList;

    /** Initializes the class. */
    function void init() {
        if (freeList = 0) {
            let freeList = 2048;
            let freeList[0] = 0;
            let freeList[1] = 14336;
        }
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array freeSegment, lastSegment;
        var int needed, available;
        let needed = size + 2;
        let freeSegment = freeList;
        while ((needed > freeSegment[1]) & (freeSegment[0] > 0)) {
            let freeSegment = freeSegment[0];
            let lastSegment = freeSegment;
        }
        let available = freeSegment[1];
        if (needed > available) {
            // THROW
            return 0;
        }
        if (needed < available) {
            // SPLIT
            let freeSegment[1] = needed;
            let freeSegment[needed] = freeSegment[0];  
            let freeSegment[needed + 1] = available - needed; 
            if (lastSegment > 0) {
                let lastSegment[0] = freeSegment + needed;
            } else {
                let freeList = freeSegment + needed;
            }
        } else {
            // TAKE
            if (lastSegment > 0) {
                let lastSegment[0] = freeSegment[0];
            } else {
                let freeList = freeSegment[0];
            }
        }
        let freeSegment = freeSegment + 2;
        while (size > 0) {
            let size = size - 1;
            let freeSegment[size] = 0;
        }
        return freeSegment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = freeList;
        let freeList = o - 2;
        return;
    }

}
