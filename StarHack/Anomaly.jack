class Anomaly {

    field int sectorIndex;
    field int subsectorIndex;
    field int strength;
    field int cooldown;

    method void init(int sector, int subsector, int str) {
        let sectorIndex = sector;
        let subsectorIndex = subsector;
        let strength = str;
        let cooldown = 1;
        return;
    }

    method int sectorIndex() {
        return sectorIndex;
    }

    method int subsectorIndex() {
        return subsectorIndex;
    }

    method boolean isDestroyed() {
        return ~(strength > 0);
    }

    method void hit(int p) {
        let strength = strength - p;
        return;
    }

    method void update(StarHackGame game) {
        var int i;
        var PlayerShip playerShip;
        var Habitat habitat;
        if (cooldown > 0) {
            let cooldown = cooldown - 1;
            return;
        }
        let playerShip = game.playerShip();
        if (sectorIndex = playerShip.sectorIndex()) {
            do anomalyFireUpon(sectorIndex, playerShip.subsectorIndex(), 10);
            return;
        }
        let i = 0;
        while (i < 8) {
            let habitat = game.habitat(i);
            if ((~(habitat.isDestroyed())) & (habitat.sectorIndex() = sectorIndex) & (habitat.subsectorIndex() = subsectorIndex)) {
                do anomalyFireUpon(sectorIndex, habitat.subsectorIndex(), 10);
                let cooldown = cooldown + 2;
            }
        }
        return;
    }

}