# Produce character graphics code fragment optimized for reduced instruction count - output to stdout

def int2jack(i):
    if i < 32768:
        return str(i)
    elif i == 32768:
        return '~32767'
    else:
        return str(i - 65536)

data = [
    (31, '', [63,63,63,63,63,63,63,63,63,0,0]),
    (32, ' ', [0,0,0,0,0,0,0,0,0,0,0]),
    (33, '!', [12,30,30,30,12,12,0,12,12,0,0]),
    (34, '"', [54,54,20,0,0,0,0,0,0,0,0]),
    (35, '#', [0,18,18,63,18,18,63,18,18,0,0]),
    (36, '$', [12,30,51,3,30,48,51,30,12,12,0]),
    (37, '%', [0,0,35,51,24,12,6,51,49,0,0]),
    (38, '&', [12,30,30,12,54,27,27,27,54,0,0]),
    (39, '\'', [12,12,6,0,0,0,0,0,0,0,0]),
    (40, '(', [24,12,6,6,6,6,6,12,24,0,0]),
    (41, ')', [6,12,24,24,24,24,24,12,6,0,0]),
    (42, '*', [0,0,0,51,30,63,30,51,0,0,0]),
    (43, '+', [0,0,0,12,12,63,12,12,0,0,0]),
    (44, ',', [0,0,0,0,0,0,0,12,12,6,0]),
    (45, '-', [0,0,0,0,0,63,0,0,0,0,0]),
    (46, '.', [0,0,0,0,0,0,0,12,12,0,0]),    
    (47, '/', [0,0,32,48,24,12,6,3,1,0,0]),
    (48, '0', [12,30,51,51,51,51,51,30,12,0,0]),
    (49, '1', [12,14,15,12,12,12,12,12,63,0,0]),
    (50, '2', [30,51,48,24,12,6,3,51,63,0,0]),
    (51, '3', [30,51,48,48,28,48,48,51,30,0,0]),
    (52, '4', [16,24,28,26,25,63,24,24,60,0,0]),
    (53, '5', [63,3,3,31,48,48,48,51,30,0,0]),
    (54, '6', [28,6,3,3,31,51,51,51,30,0,0]),
    (55, '7', [63,49,48,48,24,12,12,12,12,0,0]),
    (56, '8', [30,51,51,51,30,51,51,51,30,0,0]),
    (57, '9', [30,51,51,51,62,48,48,24,14,0,0]),
    (58, ':', [0,0,12,12,0,0,12,12,0,0,0]),
    (59, ';', [0,0,12,12,0,0,12,12,6,0,0]),
    (60, '<', [0,0,24,12,6,3,6,12,24,0,0]),
    (61, '=', [0,0,0,63,0,0,63,0,0,0,0]),
    (62, '>', [0,0,3,6,12,24,12,6,3,0,0]),
    (64, '@', [30,51,51,59,59,59,27,3,30,0,0]),
    (63, '?', [30,51,51,24,12,12,0,12,12,0,0]),
    (65, 'A', [30,51,51,51,63,51,51,51,51,0,0]), 
    (66, 'B', [31,51,51,51,31,51,51,51,31,0,0]),
    (67, 'C', [28,54,35,3,3,3,35,54,28,0,0]),
    (68, 'D', [15,27,51,51,51,51,51,27,15,0,0]),
    (69, 'E', [63,51,35,11,15,11,35,51,63,0,0]),
    (70, 'F', [63,51,35,11,15,11,3,3,3,0,0]),
    (71, 'G', [28,54,35,3,59,51,51,54,44,0,0]),
    (72, 'H', [51,51,51,51,63,51,51,51,51,0,0]),
    (73, 'I', [30,12,12,12,12,12,12,12,30,0,0]),
    (74, 'J', [60,24,24,24,24,24,27,27,14,0,0]),
    (75, 'K', [51,51,51,27,15,27,51,51,51,0,0]),
    (76, 'L', [3,3,3,3,3,3,35,51,63,0,0]),
    (77, 'M', [33,51,63,63,51,51,51,51,51,0,0]),
    (78, 'N', [51,51,55,55,63,59,59,51,51,0,0]),
    (79, 'O', [30,51,51,51,51,51,51,51,30,0,0]),
    (80, 'P', [31,51,51,51,31,3,3,3,3,0,0]),
    (81, 'Q', [30,51,51,51,51,51,63,59,30,48,0]),
    (82, 'R', [31,51,51,51,31,27,51,51,51,0,0]),
    (83, 'S', [30,51,51,6,28,48,51,51,30,0,0]),
    (84, 'T', [63,63,45,12,12,12,12,12,30,0,0]),
    (85, 'U', [51,51,51,51,51,51,51,51,30,0,0]),
    (86, 'V', [51,51,51,51,51,30,30,12,12,0,0]),
    (87, 'W', [51,51,51,51,51,63,63,63,18,0,0]),
    (88, 'X', [51,51,30,30,12,30,30,51,51,0,0]),
    (89, 'Y', [51,51,51,51,30,12,12,12,30,0,0]),
    (90, 'Z', [63,51,49,24,12,6,35,51,63,0,0]),
    (91, '[', [30,6,6,6,6,6,6,6,30,0,0]),
    (92, '\\', [0,0,1,3,6,12,24,48,32,0,0]),
    (93, ']', [30,24,24,24,24,24,24,24,30,0,0]),
    (94, '^', [8,28,54,0,0,0,0,0,0,0,0]),
    (95, '_', [0,0,0,0,0,0,0,0,0,63,0]),
    (96, '`', [6,12,24,0,0,0,0,0,0,0,0]),
    (97, 'a', [0,0,0,14,24,30,27,27,54,0,0]),
    (98, 'b', [3,3,3,15,27,51,51,51,30,0,0]),
    (99, 'c', [0,0,0,30,51,3,3,51,30,0,0]),
    (100, 'd', [48,48,48,60,54,51,51,51,30,0,0]),
    (101, 'e', [0,0,0,30,51,63,3,51,30,0,0]),
    (102, 'f', [28,54,38,6,15,6,6,6,15,0,0]),
    (103, 'g', [0,0,30,51,51,51,62,48,51,30,0]),
    (104, 'h', [3,3,3,27,55,51,51,51,51,0,0]),
    (105, 'i', [12,12,0,14,12,12,12,12,30,0,0]),
    (106, 'j', [48,48,0,56,48,48,48,48,51,30,0]),
    (107, 'k', [3,3,3,51,27,15,15,27,51,0,0]),
    (108, 'l', [14,12,12,12,12,12,12,12,30,0,0]),
    (109, 'm', [0,0,0,29,63,43,43,43,43,0,0]),
    (110, 'n', [0,0,0,29,51,51,51,51,51,0,0]),
    (111, 'o', [0,0,0,30,51,51,51,51,30,0,0]),
    (112, 'p', [0,0,0,30,51,51,51,31,3,3,0]),
    (113, 'q', [0,0,0,30,51,51,51,62,48,48,0]),
    (114, 'r', [0,0,0,29,55,51,3,3,7,0,0]),
    (115, 's', [0,0,0,30,51,6,24,51,30,0,0]),
    (116, 't', [4,6,6,15,6,6,6,54,28,0,0]),
    (117, 'u', [0,0,0,27,27,27,27,27,54,0,0]),
    (118, 'v', [0,0,0,51,51,51,51,30,12,0,0]),
    (119, 'w', [0,0,0,51,51,51,63,63,18,0,0]),
    (120, 'x', [0,0,0,51,30,12,12,30,51,0,0]),
    (121, 'y', [0,0,0,51,51,51,62,48,24,15,0]),
    (122, 'z', [0,0,0,63,27,12,6,51,63,0,0]),
    (123, '{', [56,12,12,12,7,12,12,12,56,0,0]),
    (124, '|', [12,12,12,12,12,12,12,12,12,0,0]),
    (125, '}', [7,12,12,12,56,12,12,12,7,0,0]),
    (126, '~', [38,45,25,0,0,0,0,0,0,0,0])
]

charMap = {}
for code, char, bitmap in data:
    offset = 15292 + ((code - 31) * 11)
    for index, bits in enumerate(bitmap):
        if bits == 0:
            continue
        value = int2jack(bits + bits * 256)
        charMap.setdefault(value, []).append(offset + index)

for value, offsets in charMap.items():
    print(f'ldd {value};')
    for offset in offsets:
        print(f'sto @{offset};')