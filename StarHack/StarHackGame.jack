class StarHackGame {

    field int timeLeft;
    field int displayMode;

    field PlayerShip playerShip;
    
    field ObjectArray anomalies;
    field int anomaliesLeft;

    field ObjectArray habitats;
    field int habitatsLeft;
    field boolean friendlyFire;

    field ObjectArray stars;

    field ObjectArray sectorScans;

    constructor StarHackGame new() {
        var int i, sectorIndex;
        var Anomaly anomaly;
        var Habitat habitat;
        var Star star;
        var SectorScan sectorScan;

        let timeLeft = 4000;

        let sectorScans = ObjectArray.new(64, 4);

        let sectorIndex = randomSector();
        let playerShip = PlayerShip.new(sectorIndex, randomSubsector(sectorIndex));

        let stars = ObjectArray.new(32, 2);
        let i = 0;
        while (i < 32) {
            let star = stars.get(i);
            let sectorIndex = randomSector();
            do star.init(sectorIndex, randomSubsector(sectorIndex));
            let sectorScan = sectorScan(star.sectorIndex());
            do sectorScan.incStars(1);
            let i = i + 1;
        }

        let habitatsLeft = 8;
        let habitats = ObjectArray.new(habitatsLeft, 5);
        let i = 0;
        while (i < habitatsLeft) {
            let habitat = habitats.get(i);
            let sectorIndex = randomSector();
            do habitat.init(sectorIndex, randomSubsector(sectorIndex), 50 + Random.randInt(100), Random.randInt(2), 10000);
            let sectorScan = sectorScan(habitat.sectorIndex());
            do sectorScan.incHabitats(1);
            let i = i + 1;
        }

        let anomaliesLeft = 8;
        let anomalies = ObjectArray.new(anomaliesLeft, 4);
        let i = 0;
        while (i < anomaliesLeft) {
            let anomaly = anomalies.get(i);
            let sectorIndex = randomSector();
            do anomaly.init(sectorIndex, randomSubsector(sectorIndex), 100);
            let sectorScan = sectorScan(anomaly.sectorIndex());
            do sectorScan.incAnomalies(1);
            let i = i + 1;
        }

        return this;
    }

    method int randomSector() {
        return Random.randInt(64);
    }

    method int randomSubsector(int sectorIndex) {
        var int subsectorIndex;
        while (true) {
            let subsectorIndex = Random.randInt(144);
            if (~occupied(sectorIndex, subsectorIndex)) {
                return subsectorIndex;
            }
        }
    }

    method boolean occupied(int sectorIndex, int subsectorIndex) {
        var int i;
        var Habitat habitat;
        var Anomaly anomaly;
        var Star star;
        var SectorScan sectorScan;
        let sectorScan = sectorScans.get(sectorIndex);
        if (sectorScan.stars() > 0) {
            while (i < 32) {
                let star = stars.get(i);
                if ((star.sectorIndex() = sectorIndex) & (star.subsectorIndex() = subsectorIndex)) {
                    return true;
                }
                let i = i + 1;
            }
        }
        if (sectorScan.habitats() > 0) {
            let i = 0;
            while (i < 8) {
                let habitat = habitats.get(i);
                if ((habitat.sectorIndex() = sectorIndex) & (habitat.subsectorIndex() = subsectorIndex)) {
                    return true;
                }
                let i = i + 1;
            }
        }
        if (sectorScan.anomalies() > 0) {
            let i = 0;
            while (i < 8) {
                let anomaly = anomalies.get(i);
                if ((anomaly.sectorIndex() = sectorIndex) & (anomaly.subsectorIndex() = subsectorIndex)) {
                    return true;
                }
                let i = i + 1;
            }
        }
        return false;
    }

    method Habitat findHabitat(int sectorIndex, int subsectorIndex, int d) {
        var int c, i;
        var Habitat habitat;
        let i = 0;
        while (i < 8) {
            let habitat = habitats.get(i);
            if ((~(habitat.isDestroyed())) & (habitat.sectorIndex() = sectorIndex)) {
                let c = StarMap.distance(
                    StarMap.subsectorX(subsectorIndex),
                    StarMap.subsectorY(subsectorIndex),
                    StarMap.subsectorX(habitat.subsectorIndex()),
                    StarMap.subsectorY(habitat.subsectorIndex()));
                if (c < d) {
                    return habitat;
                }
            }
            let i = i + 1;
        }
        return 0;
    }

    method SectorScan sectorScan(int sectorIndex) {
        return sectorScans.get(sectorIndex);
    }

    method PlayerShip playerShip() {
        return playerShip;
    }

    method void dispose() {
        do playerShip.dispose();
        do anomalies.dispose();
        do habitats.dispose();
        do stars.dispose();
        do sectorScans.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method boolean isRunning() {
        return (timeLeft > 0) & (anomaliesLeft > 0) & (~(playerShip.isDestroyed())) & (habitatsLeft > 0);
    }

    method void start() {
        // intro
        do TextGraphics.drawTextAligned(Constants.msg00(), 2, 3, 0);
        do TextGraphics.drawTextAligned(Constants.msg01(), 4, 6, 0);
        do TextGraphics.drawTextAligned(Constants.msg02(), 5, 6, 0);
        do TextGraphics.drawTextAligned(Constants.msg03(), 7, 6, 0);
        do TextGraphics.drawLabelValue(Constants.daysLeft(), (timeLeft / 100), 10, 32, 0);
        do CommandTerminal.awaitScreen(Constants.pressKey());
        do GameGraphics.wipeScreen();

        // main game loop 
        do Screens.gameScreen();
        do drawSectorMap(this, playerShip);
        do drawGameStatus(this, playerShip);
        
        return;
    }

    method void end() {
        do GameGraphics.wipeScreen();
        do drawEndGameReport();
        do CommandTerminal.awaitScreen(Constants.pressKey());
        do GameGraphics.wipeScreen();
        return;
    }

    method void update() {
        // player's turn
        do CommandTerminal.clear();
        do processCommand(CommandTerminal.readCommand(Constants.cmd()));

        // redraw
        do drawSectorMap(this, playerShip);
        if (displayMode = 0) {
            do drawGameStatus(this, playerShip);
        }
        if (displayMode = 1) {
            do drawStarMap();
        }
        if (displayMode = 2) {
            do drawHelp();
            let displayMode = 0;
        }

        return;
    }

    function void clearStatusDisplay() {
        do GameGraphics.clearRectangle(15, 19, 31, 170);
        return;
    }

    function void drawHelp() {
        var int i;
        var String helpString;
        do clearStatusDisplay();
        do TextGraphics.drawTextAligned(Constants.help(), 2, 45, 1);
        do TextGraphics.drawTextAligned(Constants.divider(), 3, 45, 1);
        while (i < 9) {
            do Output.moveCursor(i + 5, 29);
            do Output.printString(CommandTerminal.commandHelp(i));
            let i = i + 1;
        }
        return;
    }

    function void drawGameStatus() {
        do clearStatusDisplay();
        // game status
        do TextGraphics.drawTextAligned(Constants.missionStatus(), 3, 29, 0);
        do TextGraphics.drawTextAligned(Constants.divider(), 4, 29, 0);
        do TextGraphics.drawLabelValue(Constants.daysLeft(), (timeLeft / 100), 5, 29, 0);
        do TextGraphics.drawLabelValue(Constants.anomalies(), anomaliesLeft, 6, 29, 0);
        do TextGraphics.drawLabelValue(Constants.habitats(), habitatsLeft, 7, 29, 0);
        // ship status
        do TextGraphics.drawTextAligned(Constants.shipStatus(), 3, 44, 0);
        do TextGraphics.drawTextAligned(Constants.divider(), 4, 44, 0);
        do TextGraphics.drawLabelValue(Constants.weapons(), playerShip.weaponsStatus(), 5, 44, 0);
        do TextGraphics.drawLabelValue(Constants.engines(), playerShip.engineEfficiency(), 6, 44, 0);
        do TextGraphics.drawLabelValue(Constants.hull(), playerShip.hullIntegrity(), 7, 44, 0);
        do TextGraphics.drawLabelValue(Constants.power(), playerShip.powerReserve(), 8, 44, 0);
        if (playerShip.shieldsUp()) {
            do TextGraphics.drawLabelValue(Constants.shieldsStatUp(), playerShip.shieldLevel(), 9, 44, 0);
        } else {
            do TextGraphics.drawLabelValue(Constants.shieldsStatDown(), playerShip.shieldLevel(), 9, 44, 0);
        }
        do TextGraphics.drawLabelValue(Constants.missiles(), playerShip.missileSupply(), 10, 44, 0);
        do TextGraphics.drawLabelValue(Constants.drones(), playerShip.dronePopulation(), 11, 44, 0);
        return;
    }

    function void drawStarMap() {
        var int i, j, currentSectorIndex, sectorIndex;
        var SectorScan sectorScan;

        do clearStatusDisplay();
        do TextGraphics.drawTextAligned(Constants.longRangeScan(), 2, 45, 1);
        do TextGraphics.drawTextAligned(Constants.divider(), 3, 45, 1);

        // header
        while (j < 8) {
            do Output.moveCursor(4, 32 + (j * 4));
            do Output.printInt(j);
            let j = j + 1;
        }

        // map
        let currentSectorIndex = playerShip.sectorIndex();
        while (i < 8) {
            do Output.moveCursor(i + 5, 29);
            do Output.printInt(i);
            do Output.printChar(32);
            let j = 0;
            while (j < 8) {
                if (currentSectorIndex = sectorIndex) {
                    do Output.printChar(42);
                    do Output.printChar(42);
                    do Output.printChar(42);
                } else {
                    let sectorScan = sectorScan(sectorIndex);
                    if (sectorScan.scanned()) {
                        do Output.printInt(sectorScan.habitats());
                        do Output.printInt(sectorScan.stars());
                        do Output.printInt(sectorScan.anomalies());
                    } else {
                        do Output.printChar(0);
                        do Output.printChar(0);
                        do Output.printChar(0);
                    }
                }
                do Output.printChar(32);
                let sectorIndex = sectorIndex + 1;
                let j = j + 1;
            }
            let i = i + 1;
        }

        return;
    }

    function void drawSectorMap() {

        var int i;
        var int count;
        var int sectorIndex;
        var int subsectorIndex;
        var Anomaly anomaly;
        var Habitat habitat;
        var Star star;
        var boolean hostilesPresent;
        
        let sectorIndex = playerShip.sectorIndex();
        let subsectorIndex = playerShip.subsectorIndex();
        
        do GameGraphics.clearRectangle(2, 32, 13, 224);
        do Sprites.ship(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));

        let i = 0;
        let count = anomalies.count();
        while (i < count) {
            let anomaly = anomalies.get(i);
            if (anomaly.sectorIndex() = sectorIndex) {
                let hostilesPresent = true;
                let subsectorIndex = anomaly.subsectorIndex();
                if (anomaly.isDestroyed()) {
                    do Sprites.debris(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
                } else {
                    do Sprites.anomaly(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
                }
            }
            let i = i + 1;
        }

        let i = 0;
        let count = habitats.count();
        while (i < count) {
            let habitat = habitats.get(i);
            if (habitat.sectorIndex() = sectorIndex) {
                let subsectorIndex = habitat.subsectorIndex();
                if (habitat.isDestroyed()) {
                    do Sprites.debris(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
                } else {
                    if (habitat.type() = 0) {
                        do Sprites.orbital(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
                    } else {
                        do Sprites.planet(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
                    }
                }
            }
            let i = i + 1;
        }
        
        let i = 0;
        let count = stars.count();
        while (i < count) {
            let star = stars.get(i);
            if (star.sectorIndex() = sectorIndex) {
                let subsectorIndex = star.subsectorIndex();
                do Sprites.star(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
            }
            let i = i + 1;
        }

        do TextGraphics.drawTextAligned(Constants.sectorName(playerShip.sectorIndex()), 21, 16, 1);
        if (hostilesPresent) {
            do TextGraphics.drawTextAligned(Constants.conditionRed(), 22, 16, 1);
        } else {
            do TextGraphics.drawTextAligned(Constants.conditionGreen(), 22, 16, 1);
        }
        return;        
    }

    method int endingState() {
        if (timeLeft < 1) {
            return 0;
        }
        if (habitatsLeft < 1) {
            return 1;
        }
        if (anomaliesLeft < 1) {
            return 2;
        }
        return 3;
    }   

    method void drawEndGameReport() {
        var int gameStatus;
        let gameStatus = endingState();
        if (gameStatus = 0) {
            do TextGraphics.drawTextAligned(Constants.missionAborted(), 5, 32, 1);
            do TextGraphics.drawTextAligned(Constants.timeExpired(), 6, 32, 1);
            do TextGraphics.drawTextAligned(Constants.initiatingSpatialCollapse(), 6, 32, 1);
        }
        if (gameStatus = 1) {
            do TextGraphics.drawTextAligned(Constants.missionAborted(), 5, 32, 1);
            do TextGraphics.drawTextAligned(Constants.habitatsDestroyed(), 6, 32, 1);
            do TextGraphics.drawTextAligned(Constants.initiatingSpatialCollapse(), 6, 32, 1);
        }
        if (gameStatus = 2) {
            do TextGraphics.drawTextAligned(Constants.missionCompleted(), 5, 32, 1);
            do TextGraphics.drawTextAligned(Constants.anomaliesEliminated(), 6, 32, 1);
            if (friendlyFire) {
                do TextGraphics.drawTextAligned(Constants.friendlyFire(), 7, 32, 1);
                do TextGraphics.drawTextAligned(Constants.huntersDispatched(), 8, 32, 1);
            }
        }
        if (gameStatus = 3) {
            do TextGraphics.drawTextAligned(Constants.missionAborted(), 5, 32, 1);
            do TextGraphics.drawTextAligned(Constants.shipDestroyed(), 6, 32, 1);
        }

        do TextGraphics.drawTextAligned(Constants.divider(), 9, 32, 1);
        do TextGraphics.drawLabelValue(Constants.daysLeft(), (timeLeft / 100), 10, 20, 0);
        do TextGraphics.drawLabelValue(Constants.anomalies(), anomaliesLeft, 11, 20, 0);
        do TextGraphics.drawLabelValue(Constants.habitats(), habitatsLeft, 12, 20, 0);

        return;
    }

    method void processCommand(int commandCode) {
        var int x, y, xi, yj, i, j, d;
        var Anomaly anomaly;
        var Habitat habitat;
        var SectorScan sectorScan;
        // 0 -> LRS : Long Range Scan
        if (commandCode = 0) {
            let x = StarMap.sectorX(playerShip.sectorIndex());
            let y = StarMap.sectorY(playerShip.sectorIndex());
            let i = -1;
            while (i < 2) {
                let xi = x + i;
                if (~((xi < 0) | (xi > 7))) {
                    let j = -1;
                    while (j < 2) {
                        let yj = y + j;
                        if (~((yj < 0) | (yj > 7))) {
                            let sectorScan = sectorScan(StarMap.sectorIndex(xi, yj));
                            do sectorScan.setScanned(true);
                        }
                        let j = j + 1;
                    }
                }
                let i = i + 1;
            }
            let displayMode = 1;
            return;
        } 
        // 1 -> MJD : Micro Jump Drive in sector
        if (commandCode = 1) {
            do CommandTerminal.printMessage(Constants.microJumpTravel());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let d = playerShip.move(x, y);
                if (d = 0) {
                    do CommandTerminal.printMessage(Constants.noPower());
                    do CommandTerminal.readAnyKey(Constants.pressKey());
                } else {
                    do useTime(d, false);
                }
            }
            let displayMode = 0;
            return;
        }
        // 2 -> JMP : JuMP to a nearby sector
        if (commandCode = 2) {
            do CommandTerminal.printMessage(Constants.jumpTravel());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 8);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 8);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let d = playerShip.jump(x, y);
                if (d = 0) {
                    do CommandTerminal.printMessage(Constants.noPower());
                    do CommandTerminal.readAnyKey(Constants.pressKey());
                } else {
                    do useTime(d, true);
                }
            }
            let displayMode = 0;
            return;
        }
        // 3 -> PAC : Fire Particle Cannon
        if (commandCode = 3) {
            do CommandTerminal.printMessage(Constants.fireLasers());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let d = playerShip.fireLasers(x, y, 10);
                if (d > 0) {
                    do playerFireUpon(x, y, d);
                    do useTime(10, false);
                } else {
                    do CommandTerminal.printMessage(Constants.noPower());
                    do CommandTerminal.readAnyKey(Constants.pressKey());
                }
            }
            return;
        }
        // 4 -> AMM : Fire AntiMatter Missiles
        if (commandCode = 4) {
            do CommandTerminal.printMessage(Constants.fireMissiles());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let d = playerShip.fireMissiles(x, y);
                if (d > 0) {
                    do playerFireUpon(x, y, d);
                    do useTime(10, false);
                } else {
                    do CommandTerminal.printMessage(Constants.noAmmo());
                }
            }
            return;
        }
        // 5 -> SDN : Shields DowN
        if (commandCode = 5) {
            do CommandTerminal.printMessage(Constants.shieldsDown());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.setShields(false);
            }
            return;
        }
        // 6 -> SUP : Shields UP
        if (commandCode = 6) {
            do CommandTerminal.printMessage(Constants.shieldsUp());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.setShields(true);
            }
            return;
        }
        // 7 -> RPR : RePaiR damage
        if (commandCode = 7) {
            do CommandTerminal.printMessage(Constants.repair());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.repair();
                do CommandTerminal.readAnyKey(Constants.pressKey());
                do useTime(10, false);
            }
            return;
        }
        // 8 -> RSP : ReSuPply
        if (commandCode = 8) {
            do CommandTerminal.printMessage(Constants.resupply());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                if (findHabitat(playerShip.sectorIndex(), playerShip.subsectorIndex(), 3) > 0) {
                    if (friendlyFire) {
                        do CommandTerminal.printMessage(Constants.resupplyRefuse());
                    } else {
                        do CommandTerminal.printMessage(Constants.resupplySuccess());
                        do playerShip.resupply();
                    }
                } else {
                    do CommandTerminal.printMessage(Constants.tooFar());
                }
                do CommandTerminal.readAnyKey(Constants.pressKey());
                do useTime(10, false);
            }
            return;
        }
        // 9 -> STA : STAtus report
        if (commandCode = 9) {
            let displayMode = 0;
            return;
        }
        // cheat codes
        if (commandCode = 10) {
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.hit(1000);
            }
            return;
        }
        if (commandCode = 11) {
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let i = 0;
                while (i < 8) {
                    let habitat = habitats.get(i);
                    do playerFireUpon(habitat.sectorIndex(), habitat.subsectorIndex(), 1000);
                    let i = i + 1;
                }
            }
            return;
        }
        if (commandCode = 12) {
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                let i = 0;
                while (i < 8) {
                    let anomaly = anomalies.get(i);
                    do playerFireUpon(anomaly.sectorIndex(), anomaly.subsectorIndex(), 1000);
                    let i = i + 1;
                }
            }
            return;
        }
        // else
        let displayMode = 2;
        return;
    }

    method void anomalyFireUpon(int sectorIndex, int subsectorIndex, int p) {
        var int i, x, y;
        var Habitat habitat;
        var SectorScan sectorScan;
        let x = StarMap.subsectorX(subsectorIndex);
        let y = StarMap.subsectorY(subsectorIndex);
        // animate strike
        while (i < 4) {
            do GameGraphics.invertTile(2 + x, 2 + y);
            do Sys.wait(100);
            let i = i + 1;
        }
        // process hit
        let i = 0;
        while (i < 8) {
            let habitat = habitats.get(i);
            if ((~(habitat.isDestroyed())) & (habitat.sectorIndex() = sectorIndex) & (habitat.subsectorIndex() = subsectorIndex)) {
                do habitat.hit(p);
                let sectorScan = sectorScan(sectorIndex);
                do sectorScan.setScanned(true);
                do CommandTerminal.clear();
                do CommandTerminal.printMessage(Constants.messageIncoming());
                do CommandTerminal.printMessage(Constants.sectorName(sectorIndex));
                if (habitat.isDestroyed()) {
                    let habitatsLeft = habitatsLeft - 1;
                    do sectorScan.incHabitats(-1);
                    do CommandTerminal.printMessage(Constants.habitatDestroyed());
                } else {
                    do CommandTerminal.printMessage(Constants.habitatDistress());
                }
                do CommandTerminal.readAnyKey(Constants.pressKey());
                return;
            }
            let i = i + 1;
        }
        if ((~(playerShip.isDestroyed())) & (playerShip.sectorIndex() = sectorIndex) & (playerShip.subsectorIndex() = subsectorIndex)) {
            do playerShip.hit(p);
            do CommandTerminal.clear();
            if (playerShip.isDestroyed()) {
                do CommandTerminal.printMessage(Constants.shipDestroyed());
            } else {
                do CommandTerminal.printMessage(Constants.shipHit());
            }
            do CommandTerminal.readAnyKey(Constants.pressKey());
        }
        return;
    }

    method void playerFireUpon(int x, int y, int p) {
        var int i, sectorIndex, subsectorIndex;
        var SectorScan sectorScan;
        var Habitat habitat;
        var Anomaly anomaly;
        do CommandTerminal.clear();
        // animate strike
        while (i < 4) {
            do GameGraphics.invertTile(2 + x, 2 + y);
            do Sys.wait(100);
            let i = i + 1;
        }
        // process hit
        let sectorIndex = playerShip.sectorIndex();
        let subsectorIndex = StarMap.subsectorIndex(x, y);
        let i = 0;
        while (i < 8) {
            let habitat = habitats.get(i);
            if ((~(habitat.isDestroyed())) & (habitat.sectorIndex() = sectorIndex) & (habitat.subsectorIndex() = subsectorIndex)) {
                do habitat.hit(p);
                if (habitat.isDestroyed()) {
                    let habitatsLeft = habitatsLeft - 1;
                    let friendlyFire = true;
                    let sectorScan = sectorScan(sectorIndex);
                    do sectorScan.incHabitats(-1);
                    do CommandTerminal.printMessage(Constants.habitatDestroyed());
                } else {
                    do CommandTerminal.printMessage(Constants.friendlyFire());
                }
                do CommandTerminal.readAnyKey(Constants.pressKey());
                return;
            }
            let i = i + 1;

        }
        let i = 0;
        while (i < 8) {
            let anomaly = anomalies.get(i);
            if ((~(anomaly.isDestroyed())) & (anomaly.sectorIndex() = sectorIndex) & (anomaly.subsectorIndex() = subsectorIndex)) {
                do anomaly.hit(p);
                if (anomaly.isDestroyed()) {
                    let anomaliesLeft = anomaliesLeft - 1;
                    let sectorScan = sectorScan(sectorIndex);
                    do sectorScan.incAnomalies(-1);
                    do CommandTerminal.printMessage(Constants.anomalyDestroyed());
                } else {
                    do CommandTerminal.printMessage(Constants.anomalyHit());
                }
                do CommandTerminal.readAnyKey(Constants.pressKey());
                return;
            }
            let i = i + 1;
        }
        return;
    }

    method void useTime(int t, boolean inJump) {
        var int i;
        var Anomaly anomaly;
        let timeLeft = timeLeft - t;
        if (~inJump) {
            while (i < 8) {
                let anomaly = anomalies.get(i);
                if (~(anomaly.isDestroyed())) {
                    do anomaly.update(this);
                }
                let i = i + 1;
            }
            do playerShip.update(this);
        }
        return;
    }

}