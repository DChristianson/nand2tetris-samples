class StarHackGame {

    field int timeLeft;

    field PlayerShip playerShip;
    
    field ObjectArray anomalies;
    field int anomaliesLeft;

    field ObjectArray habitats;
    field int habitatsLeft;

    field ObjectArray stars;

    field ObjectArray sectorScans;

    constructor StarHackGame new() {
        var int i;
        var Anomaly anomaly;
        var Habitat habitat;
        var Star star;
        var SectorScan sectorScan;

        let timeLeft = 4000;

        let playerShip = PlayerShip.new(
            Random.randInt(64),
            Random.randInt(144));

        let sectorScans = ObjectArray.new(64, 3);

        let stars = ObjectArray.new(32, 2);
        let i = 0;
        while (i < 32) {
            let star = stars.get(i);
            do star.init(Random.randInt(64), Random.randInt(144));
            let sectorScan = sectorScan(star.sectorIndex());
            do sectorScan.incStars(1);
            let i = i + 1;
        }

        let habitatsLeft = 8;
        let habitats = ObjectArray.new(habitatsLeft, 3);
        let i = 0;
        while (i < habitatsLeft) {
            let habitat = habitats.get(i);
            do habitat.init(Random.randInt(64), Random.randInt(144), 10000);
            let sectorScan = sectorScan(habitat.sectorIndex());
            do sectorScan.incHabitats(1);
            let i = i + 1;
        }

        let anomaliesLeft = 8;
        let anomalies = ObjectArray.new(anomaliesLeft, 4);
        let i = 0;
        while (i < anomaliesLeft) {
            let anomaly = anomalies.get(i);
            do anomaly.init(Random.randInt(64), Random.randInt(144), 100, 1);
            let sectorScan = sectorScan(anomaly.sectorIndex());
            do sectorScan.incAnomalies(1);
            let i = i + 1;
        }

        return this;
    }

    method SectorScan sectorScan(int sectorIndex) {
        return sectorScans.get(sectorIndex);
    }

    method void dispose() {
        do playerShip.dispose();
        do anomalies.dispose();
        do habitats.dispose();
        do stars.dispose();
        do sectorScans.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int timeLeft() {
        return timeLeft;
    }

    method PlayerShip playerShip() {
        return playerShip;
    }

    method int anomaliesLeft() {
        return anomaliesLeft;
    }

    method int habitatsLeft() {
        return habitatsLeft;
    }

    method boolean isRunning() {
        return true;
    }

    method void start() {
        // intro
        do TextGraphics.drawTextAligned(Constants.msg00(), 2, 3, 0);
        do TextGraphics.drawTextAligned(Constants.msg01(), 4, 6, 0);
        do TextGraphics.drawTextAligned(Constants.msg02(), 5, 6, 0);
        do TextGraphics.drawTextAligned(Constants.msg03(), 7, 6, 0);
        do TextGraphics.drawLabelValue(Constants.daysLeft(), timeLeft(), 10, 32, 0);
        do CommandTerminal.waitForKey(Constants.pressKey());
        do GameGraphics.wipeScreen();

        // main game loop 
        do GameGraphics.drawImageToScreen(Screens.gameScreen());
        do CommandTerminal.setPosition(228, 177, 281, 76);
        do drawSectorMap(this, playerShip);
        do Main.drawGameStatus(this, playerShip);

        return;
    }

    method void update() {
        // player's turn
        do CommandTerminal.clear();
        do processCommand(CommandTerminal.readCommand(Constants.cmd()));
        // redraw
        do drawSectorMap(this, playerShip);
        do Main.drawGameStatus(this, playerShip);

        return;
    }

    function void drawSectorMap() {
        var int i;
        var int count;
        var int sectorIndex;
        var int subsectorIndex;
        var Anomaly anomaly;
        var Habitat habitat;
        var Star star;
        
        let sectorIndex = playerShip.sectorIndex();
        let subsectorIndex = playerShip.subsectorIndex();
        
        do Screen.setColor(0);
        do Screen.drawRectangle(32, 32, 222, 222);
        do Sprites.ship(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));

        let i = 0;
        let count = anomalies.count();
        while (i < count) {
            let anomaly = anomalies.get(i);
            if (anomaly.sectorIndex() = sectorIndex) {
                let subsectorIndex = anomaly.subsectorIndex();
                do Sprites.anomaly(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
            }
            let i = i + 1;
        }

        let i = 0;
        let count = habitats.count();
        while (i < count) {
            let habitat = habitats.get(i);
            if (habitat.sectorIndex() = sectorIndex) {
                let subsectorIndex = habitat.subsectorIndex();
                do Sprites.orbital(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
            }
            let i = i + 1;
        }
        
        let i = 0;
        let count = stars.count();
        while (i < count) {
            let star = stars.get(i);
            if (star.sectorIndex() = sectorIndex) {
                let subsectorIndex = star.subsectorIndex();
                do Sprites.star(2 + StarMap.subsectorX(subsectorIndex), 2 + StarMap.subsectorY(subsectorIndex));
            }
            let i = i + 1;
        }

        do TextGraphics.drawTextAligned(Strings.sectorName(playerShip.sectorIndex()), 21, 16, 1);
        do TextGraphics.drawTextAligned(Constants.conditionRed(), 22, 16, 1);
        return;        
    }

    method void processCommand(int commandCode) {
        var int x, y;
        // 0 -> LRS : Long Range Scan
        if (commandCode = 0) {
            do Output.printString("LRS");
            // TODO: implement
            return;
        } 
        // 1 -> MJD : Micro Jump Drive in sector
        if (commandCode = 1) {
            do CommandTerminal.printMessage(Constants.microJumpTravel());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.move(x, y);
            }
            return;
        }
        // 2 -> JMP : JuMP to a nearby sector
        if (commandCode = 2) {
            do CommandTerminal.printMessage(Constants.jumpTravel());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 8);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 8);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.jump(x, y);
            }
            return;
        }
        // 3 -> PAC : Fire Particle Cannon
        if (commandCode = 3) {
            do CommandTerminal.printMessage(Constants.fireLasers());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.fireLasers(x, y);
            }
            return;
        }
        // 4 -> AMM : Fire AntiMatter Missiles
        if (commandCode = 4) {
            do CommandTerminal.printMessage(Constants.fireMissiles());
            let x = CommandTerminal.readDigit(Constants.coordX(), 0, 12);
            if (x < 0) {
                return;
            }
            let y = CommandTerminal.readDigit(Constants.coordY(), 0, 12);
            if (y < 0) {
                return;
            }
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.fireMissiles(x, y);
            }
            return;
        }
        // 5 -> SDN : Shields DowN
        if (commandCode = 5) {
            do CommandTerminal.printMessage(Constants.shieldsDown());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.setShields(false);
            }
            return;
        }
        // 6 -> SUP : Shields UP
        if (commandCode = 6) {
            do CommandTerminal.printMessage(Constants.shieldsUp());
            if (CommandTerminal.readYesNo(Constants.confirm())) {
                do playerShip.setShields(true);
            }
            return;
        }
        // 7 -> REP : REPair ship
        if (commandCode = 7) {
            do CommandTerminal.printMessage(Constants.repair());
            // TODO: implement
            return;
        }
        return;
    }

}