/**
 * Simple input. 
 */
class CommandTerminal {

    static Array keyboard;

    static int startRow;
    static int startCol;
    static int lastRow;
    static int lastCol;

    static int currentRow;
    static int currentCol;

    static Array commandString;

    static Array commandHelp;

    function void init() {
        let keyboard = 24576;

        let startRow = 16;
        let startCol = 29;
        let lastCol = 63;
        let lastRow = 22;

        let commandString = Array.new(3);
        let commandHelp = Array.new(10);
        let commandHelp[0] = Constants.help00();
        let commandHelp[1] = Constants.help01();
        let commandHelp[2] = Constants.help02();
        let commandHelp[3] = Constants.help03();
        let commandHelp[4] = Constants.help04();
        let commandHelp[5] = Constants.help05();
        let commandHelp[6] = Constants.help06();
        let commandHelp[7] = Constants.help07();
        let commandHelp[8] = Constants.help08();
        let commandHelp[9] = Constants.help09();
        return;
    }

    function void clear() {
        do TextGraphics.clearText(startRow, startCol, lastRow + 1, lastCol + 1);
        let currentRow = startRow;
        let currentCol = startCol;
        return;
    }

    function void advance() {
        let currentRow = currentRow + 1;
        if (currentRow > lastRow) {
            let currentRow = startRow;
        }
        let currentCol = startCol;
        return;
    }

    // 0 -> LRS : Long Range Scan
    // 1 -> MOV : Micro Jump Drive in sector
    // 2 -> JMP : JuMP to a nearby sector
    // 3 -> PAC : Fire Particle Cannon
    // 4 -> AMM : Fire AntiMatter Missiles
    // 5 -> SDN : Shields DowN
    // 6 -> SUP : Shields UP
    // 7 -> RPR : RePaiR damage
    // 8 -> RSP : ReSuPply
    // 9 -> STA : STAtus report
    function int readCommand(String message) {
        var int i;
        var char c;
        do TextGraphics.moveCursor(currentRow, currentCol);
        do TextGraphics.printString(message);
        do TextGraphics.printChar(32);
        while (true) {
            let c = CommandTerminal.readChar();
            if (c = 128) {
                do CommandTerminal.advance();
                return parseCommandCode();
            }
            if (c = 129) {
                if (i > 0) {
                    dec i;
                    let commandString[i] = 0;
                    do TextGraphics.backSpace();
                }
            } else {
                if (i < 3) {
                    let commandString[i] = c;
                    inc i;
                    do TextGraphics.printChar(c);
                }
            }
        }
        do CommandTerminal.advance();
        return -1;
    }

    function int readDigit(String message, int min, int max) {
        var int i, v, result;
        var char c;
        do TextGraphics.moveCursor(currentRow, currentCol);
        do TextGraphics.printString(message);
        do TextGraphics.printChar(32);
        let result = -1;
        while (true) {
            let c = CommandTerminal.readChar();
            if (c = 128) {
                do CommandTerminal.advance();
                return result;
            }
            if (c = 129) {
                if (i > 0) {
                    dec i;
                    let result = -1;
                    do TextGraphics.backSpace();
                }
            } else {
                if (i < 1) {
                    if ((c > 47) & (c < 58)) {
                        let v = c - 48;
                    } else {
                        if ((c = 65) | (c = 66)) {
                            let v = c - 55;
                        } else {
                            let v = -1;
                        }
                    }
                    if ((v > (min - 1)) & (v < (max + 1))) {
                        let result = v;
                        do TextGraphics.printChar(c);
                    } 
                    inc i;
                }
            }
        }
        do CommandTerminal.advance();
        return -1;
    }

    function boolean printMessage(String message) {
        do TextGraphics.moveCursor(currentRow, currentCol);
        do TextGraphics.printString(message);
        do CommandTerminal.advance();
        return;
    }

    function boolean readYesNo(String message) {
        var boolean result;
        var int i;
        var char c;
        do TextGraphics.moveCursor(currentRow, currentCol);
        do TextGraphics.printString(message);
        do TextGraphics.printChar(32);
        let result = false;
        while (true) {
            let c = CommandTerminal.readChar();
            if (c = 128) {
                do CommandTerminal.advance();
                return result;
            }
            if (i > 0) {
                dec i;
                do TextGraphics.backSpace();
            }
            let result = c = 89;
            if (result) {
                do TextGraphics.printChar(89);
            } else {
                do TextGraphics.printChar(78);
            }
            inc i;
        }
        do CommandTerminal.advance();
        return false;
    }

    function void readAnyKey(String message) {
        do TextGraphics.moveCursor(currentRow, currentCol);
        do TextGraphics.printString(message);
        do CommandTerminal.readChar();
        do CommandTerminal.advance();
        return;
    }

    function char keyPressed() {
        return keyboard[0];
    }

    function char readChar() {
        var char c;
        while (c = 0) {
            let c = CommandTerminal.keyPressed();
        }
        while (CommandTerminal.keyPressed() = c) {
        }
        return c;
    }

    /**
     * Wait to advance screen
     */ 
    function int awaitScreen(String message) {
        var int i;
        var char c;
        do TextGraphics.moveCursor(19, 25);
        do TextGraphics.printString(message);
        while (c = 0) {
            inc i;
            let c = CommandTerminal.keyPressed();
        }
        while (CommandTerminal.keyPressed() = c) {
            inc i;
        }
        return i;
    }

    function int parseCommandCode() {
        var int commandCode;
        let commandCode = ((((commandString[0] - 65) * 32) + (commandString[1] - 65)) * 32) + (commandString[2] - 65);
        // LRS -> 11826 : Long Range Scan
        if (commandCode = 11826) {
            return 0;
        }
        // MOV -> 12757 : Micro Jump Drive in sector
        if (commandCode = 12757) {
            return 1;
        }
        // JMP -> 9615 : JuMP to a nearby sector
        if (commandCode = 9615) {
            return 2;
        }
        // PAC -> 15362 : Fire Particle Cannon
        if (commandCode = 15362) {
            return 3;
        }
        // AMM -> 396 : Fire AntiMatter Missiles
        if (commandCode = 396) {
            return 4;
        }
        // SDN -> 18541 : Shields DowN
        if (commandCode = 18541) {
            return 5;
        }
        // SUP -> 19087 : Shields UP
        if (commandCode = 19087) {
            return 6;
        }
        // RPR -> 17905 : RePaiR damage
        if (commandCode = 17905) {
            return 7;
        }
        // RSP -> 17999 : ReSuPply
        if (commandCode = 17999) {
            return 8;
        }
        // STA -> 19040 : STAtus report
        if (commandCode = 19040) {
            return 9;
        }
        // YLO -> 24942 : Cheat code - self destruct
        if (commandCode = 24942) {
            return 10;
        }
        // BNK -> 1450 : Cheat code - destroy all habitats
        if (commandCode = 1450) {
            return 11;
        }
        // LSF -> 11845 : Cheat code - destroy anomalies
        if (commandCode = 11845) {
            return 12;
        }
        return -1;
    }

    function String commandHelp(int cmd) {
        return commandHelp[cmd];
    }

}