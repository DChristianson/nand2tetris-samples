// This file is adapted from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

class TextGraphics {

    static Array screen;
    static int row, column;

    // Character map for displaying characters
    static Array charMaps; 

    // character buffer
    static Array buffer;

    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
        let screen = 16384;
        let row = 0;
        let column = 0;
        do TextGraphics.initMap();
        let buffer = Array.new(5);
        return;
    }

    // Initializes the character map array
    function void initMap() {
    
        let charMaps = Array.new(127);
        
        // Black square, used for displaying non-printable characters.
        do TextGraphics.create(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.
        do TextGraphics.create(32,0,0,0,0,0,0,0,0,0,0,0);          //
        do TextGraphics.create(33,12,30,30,30,12,12,0,12,12,0,0);  // !
        do TextGraphics.create(34,54,54,20,0,0,0,0,0,0,0,0);       // "
        do TextGraphics.create(35,0,18,18,63,18,18,63,18,18,0,0);  // #
        do TextGraphics.create(36,12,30,51,3,30,48,51,30,12,12,0); // $
        do TextGraphics.create(37,0,0,35,51,24,12,6,51,49,0,0);    // %
        do TextGraphics.create(38,12,30,30,12,54,27,27,27,54,0,0); // &
        do TextGraphics.create(39,12,12,6,0,0,0,0,0,0,0,0);        // '
        do TextGraphics.create(40,24,12,6,6,6,6,6,12,24,0,0);      // (
        do TextGraphics.create(41,6,12,24,24,24,24,24,12,6,0,0);   // )
        do TextGraphics.create(42,0,0,0,51,30,63,30,51,0,0,0);     // *
        do TextGraphics.create(43,0,0,0,12,12,63,12,12,0,0,0);     // +
        do TextGraphics.create(44,0,0,0,0,0,0,0,12,12,6,0);        // ,
        do TextGraphics.create(45,0,0,0,0,0,63,0,0,0,0,0);         // -
        do TextGraphics.create(46,0,0,0,0,0,0,0,12,12,0,0);        // .    
        do TextGraphics.create(47,0,0,32,48,24,12,6,3,1,0,0);      // /
        
        do TextGraphics.create(48,12,30,51,51,51,51,51,30,12,0,0); // 0
        do TextGraphics.create(49,12,14,15,12,12,12,12,12,63,0,0); // 1
        do TextGraphics.create(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
        do TextGraphics.create(51,30,51,48,48,28,48,48,51,30,0,0); // 3
        do TextGraphics.create(52,16,24,28,26,25,63,24,24,60,0,0); // 4
        do TextGraphics.create(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
        do TextGraphics.create(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
        do TextGraphics.create(55,63,49,48,48,24,12,12,12,12,0,0); // 7
        do TextGraphics.create(56,30,51,51,51,30,51,51,51,30,0,0); // 8
        do TextGraphics.create(57,30,51,51,51,62,48,48,24,14,0,0); // 9
        
        do TextGraphics.create(58,0,0,12,12,0,0,12,12,0,0,0);      // :
        do TextGraphics.create(59,0,0,12,12,0,0,12,12,6,0,0);      // ;
        do TextGraphics.create(60,0,0,24,12,6,3,6,12,24,0,0);      // <
        do TextGraphics.create(61,0,0,0,63,0,0,63,0,0,0,0);        // =
        do TextGraphics.create(62,0,0,3,6,12,24,12,6,3,0,0);       // >
        do TextGraphics.create(64,30,51,51,59,59,59,27,3,30,0,0);  // @
        do TextGraphics.create(63,30,51,51,24,12,12,0,12,12,0,0);  // ?

        do TextGraphics.create(65,30,51,51,51,63,51,51,51,51,0,0); // A 
        do TextGraphics.create(66,31,51,51,51,31,51,51,51,31,0,0); // B
        do TextGraphics.create(67,28,54,35,3,3,3,35,54,28,0,0);    // C
        do TextGraphics.create(68,15,27,51,51,51,51,51,27,15,0,0); // D
        do TextGraphics.create(69,63,51,35,11,15,11,35,51,63,0,0); // E
        do TextGraphics.create(70,63,51,35,11,15,11,3,3,3,0,0);    // F
        do TextGraphics.create(71,28,54,35,3,59,51,51,54,44,0,0);  // G
        do TextGraphics.create(72,51,51,51,51,63,51,51,51,51,0,0); // H
        do TextGraphics.create(73,30,12,12,12,12,12,12,12,30,0,0); // I
        do TextGraphics.create(74,60,24,24,24,24,24,27,27,14,0,0); // J
        do TextGraphics.create(75,51,51,51,27,15,27,51,51,51,0,0); // K
        do TextGraphics.create(76,3,3,3,3,3,3,35,51,63,0,0);       // L
        do TextGraphics.create(77,33,51,63,63,51,51,51,51,51,0,0); // M
        do TextGraphics.create(78,51,51,55,55,63,59,59,51,51,0,0); // N
        do TextGraphics.create(79,30,51,51,51,51,51,51,51,30,0,0); // O
        do TextGraphics.create(80,31,51,51,51,31,3,3,3,3,0,0);     // P
        do TextGraphics.create(81,30,51,51,51,51,51,63,59,30,48,0);// Q
        do TextGraphics.create(82,31,51,51,51,31,27,51,51,51,0,0); // R
        do TextGraphics.create(83,30,51,51,6,28,48,51,51,30,0,0);  // S
        do TextGraphics.create(84,63,63,45,12,12,12,12,12,30,0,0); // T
        do TextGraphics.create(85,51,51,51,51,51,51,51,51,30,0,0); // U
        do TextGraphics.create(86,51,51,51,51,51,30,30,12,12,0,0); // V
        do TextGraphics.create(87,51,51,51,51,51,63,63,63,18,0,0); // W
        do TextGraphics.create(88,51,51,30,30,12,30,30,51,51,0,0); // X
        do TextGraphics.create(89,51,51,51,51,30,12,12,12,30,0,0); // Y
        do TextGraphics.create(90,63,51,49,24,12,6,35,51,63,0,0);  // Z

        do TextGraphics.create(91,30,6,6,6,6,6,6,6,30,0,0);          // [
        do TextGraphics.create(92,0,0,1,3,6,12,24,48,32,0,0);        // \
        do TextGraphics.create(93,30,24,24,24,24,24,24,24,30,0,0);   // ]
        do TextGraphics.create(94,8,28,54,0,0,0,0,0,0,0,0);          // ^
        do TextGraphics.create(95,0,0,0,0,0,0,0,0,0,63,0);           // _
        do TextGraphics.create(96,6,12,24,0,0,0,0,0,0,0,0);          // `

        do TextGraphics.create(97,0,0,0,14,24,30,27,27,54,0,0);      // a
        do TextGraphics.create(98,3,3,3,15,27,51,51,51,30,0,0);      // b
        do TextGraphics.create(99,0,0,0,30,51,3,3,51,30,0,0);        // c
        do TextGraphics.create(100,48,48,48,60,54,51,51,51,30,0,0);  // d
        do TextGraphics.create(101,0,0,0,30,51,63,3,51,30,0,0);      // e
        do TextGraphics.create(102,28,54,38,6,15,6,6,6,15,0,0);      // f
        do TextGraphics.create(103,0,0,30,51,51,51,62,48,51,30,0);   // g
        do TextGraphics.create(104,3,3,3,27,55,51,51,51,51,0,0);     // h
        do TextGraphics.create(105,12,12,0,14,12,12,12,12,30,0,0);   // i
        do TextGraphics.create(106,48,48,0,56,48,48,48,48,51,30,0);  // j
        do TextGraphics.create(107,3,3,3,51,27,15,15,27,51,0,0);     // k
        do TextGraphics.create(108,14,12,12,12,12,12,12,12,30,0,0);  // l
        do TextGraphics.create(109,0,0,0,29,63,43,43,43,43,0,0);     // m
        do TextGraphics.create(110,0,0,0,29,51,51,51,51,51,0,0);     // n
        do TextGraphics.create(111,0,0,0,30,51,51,51,51,30,0,0);     // o
        do TextGraphics.create(112,0,0,0,30,51,51,51,31,3,3,0);      // p
        do TextGraphics.create(113,0,0,0,30,51,51,51,62,48,48,0);    // q
        do TextGraphics.create(114,0,0,0,29,55,51,3,3,7,0,0);        // r
        do TextGraphics.create(115,0,0,0,30,51,6,24,51,30,0,0);      // s
        do TextGraphics.create(116,4,6,6,15,6,6,6,54,28,0,0);        // t
        do TextGraphics.create(117,0,0,0,27,27,27,27,27,54,0,0);     // u
        do TextGraphics.create(118,0,0,0,51,51,51,51,30,12,0,0);     // v
        do TextGraphics.create(119,0,0,0,51,51,51,63,63,18,0,0);     // w
        do TextGraphics.create(120,0,0,0,51,30,12,12,30,51,0,0);     // x
        do TextGraphics.create(121,0,0,0,51,51,51,62,48,24,15,0);    // y
        do TextGraphics.create(122,0,0,0,63,27,12,6,51,63,0,0);      // z
        
        do TextGraphics.create(123,56,12,12,12,7,12,12,12,56,0,0);   // {
        do TextGraphics.create(124,12,12,12,12,12,12,12,12,12,0,0);  // |
        do TextGraphics.create(125,7,12,12,12,56,12,12,12,7,0,0);    // }
        do TextGraphics.create(126,38,45,25,0,0,0,0,0,0,0,0);        // ~

    	return;
    }

    // Creates the character map array of the given character index, using the given values.
    function void create(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
        var Array map;

        let map = Array.new(11);
        let charMaps[index] = map;

        let map[0] = a + (a * 256);
        let map[1] = b + (b * 256);
        let map[2] = c + (c * 256);
        let map[3] = d + (d * 256);
        let map[4] = e + (e * 256);
        let map[5] = f + (f * 256);
        let map[6] = g + (g * 256);
        let map[7] = h + (h * 256);
        let map[8] = i + (i * 256);
        let map[9] = j + (j * 256);
        let map[10] = k + (k * 256);

        return;
    }

    /**
     * Print text at the given row/col position. An alignment of 1 will center the 
     * string at the specified position, 2 will right align, any other input will left align.
     */
    function void drawTextAligned(String s, int row, int col, int alignment) {
        if (alignment = 1) {
            let col = col - (s.length() / 2);
        } else {
            if (alignment = 2) {
                let col = col - s.length();
            }
        }
        if (col < 0) {
            let col = 0;
        }
        do TextGraphics.moveCursor(row, col);
        do TextGraphics.printString(s);
        return;
    }

    function void drawLabelValue(String label, int value, int row, int col, int labelAlignment) {
        do TextGraphics.drawTextAligned(label, row, col, labelAlignment);
        do TextGraphics.printChar(58);
        do TextGraphics.printChar(32);
        do TextGraphics.printInt(value);
        return;        
    }
    
    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        return charMaps[c];
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        var int offset;
        var int mask;
        var int k;
        let row = i;
        let column = j;
        let offset = column / 2;
        if ((column - (offset + offset)) > 0) {
            let mask = 255;
        } else {
            let mask = ~255;
        }
        let offset = (row * 352);
        while (k < 11) {
            let screen[offset] = (screen[offset] & mask);
            let k = k + 1;
        }
        return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        var Array map;
        var int offset;
        var int mask;
        var int shift;
        var int k;
        let map = TextGraphics.getMap(c);
        let offset = column / 2;
        if ((column - (offset + offset)) > 0) {
            let shift = ~255;
            let mask = 255;
        } else {
            let shift = 255;
            let mask = ~255;
        }
        let offset = (row * 352) + offset;
        while (k < 11) {
            let screen[offset] = (screen[offset] & mask) + (map[k] & shift);
            let offset = offset + 32;
            let k = k + 1;
        }
        // advance
        let column = column + 1;
        if (column > 63) {
            let column = 0;
            let row = row + 1;
            if (row > 22) {
                let row = 0;
            }
        }
        return;
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int i, len;
        let len = s.length();
        while (i < len) {
            do TextGraphics.printChar(s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int val) {
        var int d, r, i;

        if (val < 0) {
            do TextGraphics.printChar(45);
            let val = -val;
        }

        // shortcut if the number is one digit
        if (val < 10) {
            do TextGraphics.printChar(48 + val);
            return;
        }

        // K+R algo
        let i = 0;
        while (val > 0) {
            let d = val / 10;
            let r = val - (10 * d);
            let buffer[i] = (48 + r);
            let i = i + 1;
            let val = d;
        }
 
        // reverse in place
        while (i > 0) {
            let i = i - 1;
            do TextGraphics.printChar(buffer[i]);
        }

        return;
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
        let column = 0;
        let row = row + 1;
        if (row > 22) {
            let row = 0;
        }
        return;
    }

    /** clear text in given rectangle **/
    function void clearText(int r1, int c1, int r2, int c2) {
        var int offset, rowStart, rowEnd;
        var int mask;
        var int stop;
        var boolean halfStart, halfEnd;

        let rowStart = c1 / 2;
        let halfStart = (c1 - (rowStart + rowStart)) > 0;
        let rowEnd = c2 / 2;
        let halfEnd = (c2 - (rowEnd + rowEnd)) > 0;

        let r1 = (r1 * 352);
        let r2 = (r2 * 352);
        while (r1 < r2) {
            let offset = r1 + rowStart;
            let stop = r1 + rowEnd;
            if (halfStart) {
                let screen[offset] = screen[offset] & 255;
                let offset = offset + 1;
            }
            while (offset < stop) {
                let screen[offset] = 0;
                let offset = offset + 1;
            }
            if (halfEnd) {
                let screen[offset] = screen[offset] & (~255);
            }
            let r1 = r1 + 32;
        }
        return;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
        var int offset;
        var int mask;
        var int k;
        let column = column - 1;
        if (column < 0) {
            let column = 63;
            let row = row - 1;
            if (row < 0) {
                let row = 22;
            }
        }
        let offset = column / 2;
        if ((column - (offset + offset)) > 0) {
            let mask = 255;
        } else {
            let mask = ~255;
        }
        let offset = (row * 352) + offset;
        while (k < 11) {
            let screen[offset] = (screen[offset] & mask);
            let offset = offset + 32;
            let k = k + 1;
        }
        return;
    }

}