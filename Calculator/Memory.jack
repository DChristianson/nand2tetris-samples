// This file is adapted from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

class Memory {

    static Array freeList;

    function void init() {
        let freeList = 2048;
        let freeList[0] = 0;
        let freeList[1] = 14336;
        return;
    }

    function int alloc(int size) {
        register Array freeSegment, lastSegment;
        register int needed, available;
        let needed = size + 2;
        let freeSegment = freeList;
        let lastSegment = 0;
        while ((needed > freeSegment[1]) & (freeSegment[0] > 0)) {
            let lastSegment = freeSegment;
            let freeSegment = freeSegment[0];
        }
        let available = freeSegment[1];
        if (needed > available) {
            // TODO: THROW
            return 0;
        }
        if ((needed < available) & ((available - needed) > 2)) {
            // SPLIT
            let freeSegment[1] = needed;
            let freeSegment[needed] = freeSegment[0];  
            let freeSegment[needed + 1] = available - needed; 
            if (lastSegment > 0) {
                let lastSegment[0] = freeSegment + needed;
            } else {
                let freeList = freeSegment + needed;
            }
        } else {
            // TAKE
            if (lastSegment > 0) {
                let lastSegment[0] = freeSegment[0];
            } else {
                let freeList = freeSegment[0];
            }
        }
        let freeSegment = freeSegment + 2;
        while (size > 0) {
            let size = size - 1;
            let freeSegment[size] = 0;
        }
        return freeSegment;
    }
    
    function void deAlloc(Array o) {
        let o[-2] = freeList;
        let freeList = o - 2;
        return;
    }

}
