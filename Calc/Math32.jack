/**
 * Utilities for working with 32 bit 56 integers.
 * Represents the integer as any pair of two 16-bit integers.
 */
class Math32 {

    /**
     * Unsigned addition of 32 bit arrays
     */
    function int add32(Array a, Array b, Array out) {
        var int x, y, carry;
        
        // lower 16 bits
        let x = Bits.word0(a[0]) + Bits.word0(b[0]);
        let carry = Bits.word1(x);
        let y = Bits.word1(a[0]) + Bits.word1(b[0]) + carry;
        let carry = Bits.word1(y);
        let out[0] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        // upper 16 bits
        let x = Bits.word0(a[1]) + Bits.word0(b[1]) + carry;
        let carry = Bits.word1(x);
        let y = Bits.word1(a[1]) + Bits.word1(b[1]) + carry;
        let carry = Bits.word1(y);
        let out[1] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        return carry;
    }

    /**
     * Unsigned addition of 32 bit array by a 16 bit integer
     */
    function int add32x16(Array a, int b, Array out) {
        var int x, y, carry;
        
        // lower 16 bits
        let x = Bits.word0(a[0]) + Bits.word0(b);
        let carry = Bits.word1(x);
        let y = Bits.word1(a[0]) + Bits.word1(b) + carry;
        let carry = Bits.word1(y);
        let out[0] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        // upper 16 bits
        let x = Bits.word0(a[1]) + carry;
        let carry = Bits.word1(x);
        let y = Bits.word1(a[1]) + carry;
        let carry = Bits.word1(y);
        let out[1] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        return carry;
    }

    function int sub32(Array a, Array b, Array out) {
        var int x, y, borrow;

        // lower 16 bits
        let x = Bits.word0(a[0]) - Bits.word0(b[0]);
        let borrow = x < 0; // take advantage of true = -1
        if (borrow) {
            let x = x + 256;
        }
        let y = Bits.word1(a[0]) - Bits.word1(b[0]) + borrow;
        let borrow = y < 0;
        if (borrow) {
            let y = y + 256;
        }
        let out[0] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        // upper 16 bits
        let x = Bits.word0(a[1]) - Bits.word0(b[1]) + borrow;
        let borrow = x < 0;
        if (borrow) {
            let x = x + 256;
        }
        let y = Bits.word1(a[1]) - Bits.word1(b[1]) + borrow;
        let borrow = y < 0;
        if (borrow) {
            let y = y + 256;
        }
        let out[1] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        return borrow;
    }

    function int mul32(Array a, Array b, Array out) {
        return 0;
    }

    /**
     * Unsigned multiplication of 32 bit array by a byte
     */
    function int mul32x8(Array a, int b, Array out) {
        var int x, y, carry;
        
        // truncate b
        let b = Bits.word0(b);

        // lower 16 bits
        let x = Bits.word0(a[0]) * b;
        let carry = Bits.word1(x);
        let y = (Bits.word1(a[0]) * b) + carry;
        let carry = Bits.word1(y);
        let out[0] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        // upper 16 bits
        let x = (Bits.word0(a[1]) * b) + carry;
        let carry = Bits.word1(x);
        let y = (Bits.word1(a[1]) * b) + carry;
        let carry = Bits.word1(y);
        let out[1] = Bits.lshift8(Bits.word0(y)) + Bits.word0(x);

        return carry;
    }

    /**
     * Unsigned division of 32 bit array by a byte
     */
    function int div32x8(Array a, int b, Array out) {
        var int x, y, carry, remainder;

        // truncate b 
        let b = Bits.word0(b);

        // upper 16 bits
        let carry = Bits.word1(a[1]);
        let y = carry / b;
        let remainder = carry - (y * b);
        let carry = Bits.lshift8(remainder) + Bits.word0(a[1]);
        let x = carry / b;
        let remainder = carry - (x * b);
        let out[1] = Bits.lshift8(y) + x;
        
        // lower 16 bits
        let carry = Bits.lshift8(remainder) + Bits.word1(a[0]);
        let y = carry / b;
        let remainder = carry - (y * b);
        let carry = Bits.lshift8(remainder) + Bits.word0(a[0]);
        let x = carry / b;
        let remainder = carry - (x * b);
        let out[0] = Bits.lshift8(y) + x;

        return remainder;
    }
        
}